MyShell 一个简单的终端

功能

支持所有外部指令

部分内部指令包括: cd, pwd, clr, dir, environ, echo, help, quit, time, umask,
jobs, bg, fg, exec, export, set, unset, continue, shift, test, exit

支持"<"输入重定向, ">"和">>"输出重定向, 支持管道, 程序环境,
后台执行进程和前后台进程切换, Ctrl+Z挂起前台进程, Ctrl+C中断前台进程, Ctrl+\退出前台进程
执行脚本文件


一 外部指令
	执行外部指令调用execvp函数, 从环境变量$PATH中逐个寻找对应的可执行文件,
默认的环境变量$PATH=/bin:/usr/bin, 其中":"为分隔符号, 表示$PATH包括/bin和/usr/bin

二 内部指令
bg: bg [任务声明]
	移动任务到前台
	
	 将任务声明标识的任务放至后台，就像它们
    是带 `&' 启动的一样。如果任务声明标识的任务不存在，shell 观念中的
    当前任务将会被使用。
    
    退出状态：
    返回0,缺省参数并且没有合适的进程时返回-1

cd : cd [dir]
    改变当前工作目录

    改变当前工作目录到dir, 如果dir没有给出,
    则改变当前工作目录到$HOME

    退出状态:
    如果没给出dir或给出的dir是合法的目录, 返回0; 否则返回-1
    
clr: clr
	清空输出屏幕
	
	退出状态:
	返回0, 除非写入错误返回-1

continue: continue
    返回1

    退出状态:
    返回1

echo: echo [参数]
	打印出输入的参数到工作台
	
	支持$打印环境变量, 如$PATH, $HOME和用户定义的变量
	支持 
		$?: 上一条命令返回状态,
		$#: 位置参数个数
		$@, $*: 所有位置参数(以空格隔开) 
		$1, $2,  ... $9: 位置参数
		
	退出状态:
	返回0
	
exec : exec [命令]
	使用指定命令替换shell
	
	退出状态:
	直接退出不返回

exit: exit [N]
	退出shell
	
	以状态N退出shell。  如果N被省略，则退出状态
	为最后一个执行的命令的退出状态。
	
	退出状态:
	不返回

export: export [command] ...
	为 shell 变量设定导出属性
	
	command应该为"NAME" 或者"NAME=VALUE"的模式
	标记每个 NAME 名称为自动导出到后续命令执行的环境,并在
   导出前将 VALUE 作为赋值。如果没有"=VALUE", 将NAME从环境变量中移除
   
   退出状态:
   返回0, 除非command非法则返回-1

fg: fg [任务声明]
    将任务移至前台。
    
    将以任务声明标识的任务放至前台，使其成为
    当前任务。如果任务声明标识的任务不存在，shell 观念中的当前任务 
    将被使用。
    
    退出状态：
    返回0，缺省参数并且没有合适的进程时返回-1

help: help [内建命令]
    显示内建命令的相关信息

    退出状态:
    如果所有指令都能找到, 返回0;否则返回-1
    
jobs: jobs
	显示所有后台运行过的进程信息
	
	退出状态:
	返回0
	
pwd: pwd
    打印当前目录

    退出状态:
    除非使用了无效选项或者当前目录不可读返回-1，否则
    返回状态为0。
    
set: set
	显示所有环境变量
	
	退出状态:
	返回0
	
shift: shift [N]
	向左移动位置参数
	
	向左移动位置参数N位, 如果N没有给出,默认N=1
	
	退出状态:
	返回0, 若N输入大于$#返回-1
	
time: time
	打印当前时间到标准输出
	
	退出状态:
	返回0
	
test: test [命令]
    判断命令的正确性
    
    判断出命令的正确性, 返回1为真, 0为假. 返回结果可通过$?访问
    
	文件操作
		-b FILE 	文件存在且为块特殊文件返回1, 否则返回0
		-c FILE 	文件存在且为字符特殊文件返回1, 否则返回0
		-d FILE 	文件存在且为目录返回1, 否则返回0
		-e FILE 	文件存在返回1, 否则返回0
		-f FILE 	文件存在且为普通文件返回1, 否则返回0
		-h FILE 	文件存在且为符号链接返回1, 否则返回0
		-L FILE 	文件存在且为符号链接返回1, 否则返回0
		-k FILE 	文件存在且设有粘着位返回1, 否则返回0
		-p FILE 	文件存在且为管道或FIFO返回1, 否则返回0
		-r FILE 	文件存在且当前用户可读返回1, 否则返回0
		-s FILE 	文件存在且不为空文件返回1, 否则返回0
		-S FILE 	文件存在且为套接字类型返回1, 否则返回0
		-w FILE 	文件存在且当前用户可写返回1, 否则返回0
		-x FILE 	文件存在且当前用户可执行返回1, 否则返回0   
		FILE1 -nt FILE2  如果FILE1比FILES修改时间更早返回1, 否者返回0
		FILE1 -ot FILE2  如果FILE1比FILES修改时间更迟返回1, 否者返回0
    
	字符串操作: 
		-z STRING   如果string为空, 返回1, 否者返回0
		-n STRING	如果string不为空, 返回1, 否者返回0
		STRING1 = STRING2
		STRING1 != STRING2
		STRING1 <= STRING2
		STRING1 >= STRING2
    
	关系操作	
		EXPR1 -a EXPR2 返回 EXPR1 & EXPR2
		EXPR1 -o EXPR2 返回 EXPR1 | EXPR2
    
	退出状态:
		若为真返回1, 如果为假或者件不存在或者参数形式错误返回0
	
umask: umask [N]
	显示或设定文件模式掩码
	
	设定用户文件创建掩码N。如果省略了 MODE，则
   打印当前掩码的值。N为8进制形式输入
   
   退出状态:
   返回成功，除非使用了无效的 MODE 模式或者选项。
   
unset: unset [NAME] ...
	移除环境变量
	
	将NAME从环境变量中移除
	
	退出状态:
	如果某个NAME不存在于环境变量, 返回-1, 否则返回0
	
三 IO重定向

重定向解释:一般程序默认的输入为标准输入, 也就是在命令行窗口的输入; 默认的输出为标准输出, 也就是默认输出到命令行窗口.
所为重定向就是改变程序的默认的输入和输出方向, 比如将某个文件作为程序的输入或将程序的输出都输出到某个文件上, 重定向后
程序的输入和输出不再一定是命令窗口

MyShell支持输入和输出的重定向, 输入重定向的符号为"<", 输出重定向的符号为">"和">>"
例如:
1,	comamand arg1 arg2 < inputfile > outputfile 会读入inputfile的内容作为输入, 将结果输出到outputfile,
如果outputfile不存在先创建outputfile, 如果outputfile已经存在就将输出结果覆盖outputfile
2, comamand arg1 arg2 < inputfile >> outputfile 会读入inputfile的内容作为输入, 将结果输出到outputfile,
如果outputfile不存在先创建outputfile, 如果outputfile已经存在就将输出结果添加到outputfile后面

四 管道操作

管道是单向的, 实现将前一个命令的输出作为后一个命令的输入. 管道可以看做一种灵活的重定向, 管道操作通常针对多个独立进行的命令, 
例如:
1,	cmd1 | cmd2 | cmd3 中, cmd1的输入是标准输入, 输出作为cmd2的输入, cmd2的输出会作为cmd3的输入, cmd3的输出会定向到标准输出

五 进程中断执行和前后台切换

命令运行包括前台和后台运行, 前台运行就是普通的直接执行, 一个MyShell终端只有一个前台进程, 
只有等待该当前前台命令执行结束后才能进行下一条命令的执行,
后台运行让命令运行在后台, 后台命令执行时前台仍然能正常读取命令并执行

执行命令默认是前台执行, 要将命令放在后台执行, 在后面添加'&'即可, 注意'&'前后要有空格

MyShell支持3个键盘信号
	1, Ctrl+\ 直接退出前台执行的进程
	2, Ctrl+C 中断前台执行的进程
	3, Ctrl+Z 挂起前台执行的进程
进程被被挂起后可以通过fg, bg指令将进程切换到前台或后台继续执行, 具体参见fg, bg內建指令的介绍


六 其他功能
命令:
	myshell file1 file2 ...

执行可执行文件, 将文件作为输入, 相当于重定向myshell的输入为指定文件, 逐个执行















	






